function T1 = fit_T1_IR_data(img, TI, mask)

% I keep getting issues the qMRlab code, so lets adapt it.
% Currently assumes 2D


% Fit to Barral Model: a+b*exp(-TI/T1)
% Assume magnitude only data. Complex data is probably better handled by
% qMRlab

% fitting options
st = [  600     -1000      500 ]; % starting point
lb = [ 0.0001   -10000  0.0001 ]; % lower bound
ub = [  5000       0     10000 ]; % upper bound
fx = [    0        0        0  ]; % fix parameters

% Have issue of where the flip point is from negative to positive
% We could just square the equation and fit it? 
[x,y,~] = size(img);

if max(TI) < 50
    TI = TI *1000;
end

TI = TI(:); % ensure it is column

T1 = zeros(x,y,z);

for i = 1:x
    for j = 1:y
            if mask(i,j) > 0 % Need min 5 points for fit
 
                img_voxel = squeeze(img(i,j,:)); % squeeze necessary to reformat to 1D array
                
               

                    opts = fitoptions( 'Method', 'NonlinearLeastSquares','Lower',[0,0],'Upper',[5000,200], 'Start', [1500, 50]);
                    opts.Robust = 'Bisquare';
                    % now fit
                    myfittype = fittype('k * exp(-TE_fit/T2st)','dependent', {'img_voxel'}, 'independent',{'TE_fit'},'coefficients', {'k','T2st'});
                    fitT2st = fit( TE_fit, img_voxel, myfittype, opts ); % Add in upper and lower bounds to help with fit
                    %fitT2st = fit( TE_fit, img_voxel, myfittype, 'Lower',[0,0],'Upper',[5000,200], 'Start', [1500, 25] ); % Add in upper and lower bounds to help with fit
                    T2stcoef = coeffvalues(fitT2st);

                    k_map(i,j,k) = T2stcoef(1);
                    T2_star(i,j,k) = T2stcoef(2);
                end

            end
     end
end
